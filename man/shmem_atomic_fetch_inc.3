.TH SHMEM_ATOMIC_FETCH_INC 1 2017-06-06 "Intel Corp." "OpenSHEMEM Library Documentation"
.SH NAME
shmem_atomic_fetch_inc \-  Performs an atomic fetch-and-increment  operation on a remote data object.
.SH SYNOPSIS
.nf
.B C11: 
TYPE shmem_atomic_fetch_inc(TYPE *dest, int pe);
.B C/C++: 
TYPE shmem_<TYPENAME>_atomic_fetch_inc(TYPE *dest, int pe);

* TYPE is one of the extended AMO types
.B FORTRAN: 
INTEGER pe
INTEGER*4 SHMEM_INT4_FINC, ires_i4
ires_i4 = SHMEM_INT4_FINC(dest, pe)
INTEGER*8 SHMEM_INT8_FINC, ires_i8
ires_i8 = SHMEM_INT8_FINC(dest, pe)
.fi
.SH DESCRIPTION
.SS Arguments

.BR "IN " - 
.I dest
- The remotely accessible integer data object to be updated on the remote 
PE. The type of 
.I dest
should match that implied in the SYNOPSIS section.

.BR "IN " - 
.I pe
- An integer that indicates the 
PE
number on which 
.I dest
is to be updated. If you are using Fortran, it must be a default integer value.
.SS API Description
These routines perform a fetch-and-increment operation.  The 
.I dest
on PE
.I pe
is increased by one and the routine returns the previous contents of 
.I dest
as an atomic operation.

If you are using Fortran, 
.I dest
must be of the following type:
.nf
Routine          | Data type of dest and source

SHMEM\_INT4\_FINC  | 4-byte integer

SHMEM\_INT8\_FINC  | 8-byte integer

.SS Return Values
The contents that had been at the 
.I dest
address on the remote 
PE
prior to the increment. The data type of the return value is the same as the 
.IR "dest" .
.SS API Notes
As of OpenSHMEM 1.4, 
.B shmem\_finc
has been deprecated. Its behavior and call signature are identical to the replacement interface, 
.BR "shmem\_atomic\_fetch\_inc" .
.SS Example

The following 
.B shmem\_atomic\_fetch\_inc
example is for C11 programs:

./
.nf
#include <stdio.h>
#include <shmem.h>

int main(void)
{
  int old = -1;
  static int dst = 22;
  shmem_init();
  int me = shmem_my_pe();
  if (me == 0)
     old = shmem_atomic_fetch_inc(&dst, 1);
  shmem_barrier_all();
  printf("%d: old = %d, dst = %d\\n", me, old, dst);
  shmem_finalize();
  return 0;
}

.fi



