.TH SHMEM_ATOMIC_SWAP 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_atomic_swap \- 
Performs an atomic swap to a remote data object.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C11:

.B TYPE
.B shmem\_atomic\_swap(TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



.B TYPE
.B shmem\_atomic\_swap(shmem_ctx_t
.IB "ctx" ,
.B TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the extended AMO types specified by Table 3.
./ sectionStart
.SS C/C++:

.B TYPE
.B shmem\_TYPENAME\_atomic\_swap(TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



.B TYPE
.B shmem\_ctx\_TYPENAME\_atomic\_swap(shmem_ctx_t
.IB "ctx" ,
.B TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the extended AMO types and has a corresponding TYPENAME specified by Table 3.


./ sectionStart
.B ***************DEPRECATED***************
./ sectionEnd

./ sectionStart
.SS C11:

.B TYPE
.B shmem\_swap(TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of \{float, double, int,
long, long long\}.
./ sectionStart
.SS C/C++:

.B TYPE
.B shmem\_TYPENAME\_swap(TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of \{float, double, int,
long, long long\} and has a corresponding
TYPENAME specified by Table 3.

./ sectionStart
.B ****************************************
./ sectionEnd

./ sectionStart

.B ***************DEPRECATED***************
.SS Fortran:

.nf

.BR "INTEGER " "SHMEM_SWAP, value, pe"
ires = SHMEM\_SWAP(dest, value, pe)
.BR "INTEGER*4 " "SHMEM_INT4_SWAP, value_i4, ires_i4"
ires\_i4 = SHMEM\_INT4\_SWAP(dest, value_i4, pe)
.BR "INTEGER*8 " "SHMEM_INT8_SWAP, value_i8, ires_i8"
ires\_i8 = SHMEM\_INT8\_SWAP(dest, value_i8, pe)
.BR "REAL*4 " "SHMEM_REAL4_SWAP, value_r4, res_r4"
res\_r4 = SHMEM\_REAL4\_SWAP(dest, value_r4, pe)
.BR "REAL*8 " "SHMEM_REAL8_SWAP, value_r8, res_r8"
res\_r8 = SHMEM\_REAL8\_SWAP(dest, value_r8, pe)

.fi
.B ****************************************

./ sectionEnd




./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I ctx
- The context on which to perform the operation.
When this argument is not provided, the operation is performed on
SHMEM\_CTX\_DEFAULT.


.BR "OUT " -
.I dest
- The remotely accessible integer data object to be
updated on the remote PE. When using  C/C++, the type of
.I "dest"
should match that implied in the SYNOPSIS section.


.BR "IN " -
.I value
- The value to be atomically written to the remote
PE. 
.I value
is the same type as 
.IR "dest" .



.BR "IN " -
.I pe
-  An integer that indicates the PE number on which
.I "dest"
is to be updated. When using Fortran, it must be a default
integer value.
./ sectionEnd


./ sectionStart

.SS API Description

.B shmem\_atomic\_swap
performs an atomic swap operation.
It writes 
.I value
into 
.I "dest"
on PE and returns the previous
contents of 
.I "dest"
as an atomic operation.

./ sectionEnd



./ sectionStart

When using Fortran, 
.I dest
and 
.I value
must be of the following type:

.TP 25
Routine
Data type of 
.I dest
and 
.I value

./ sectionEnd



./ sectionStart
.TP 25
SHMEM\_SWAP
Integer of default kind
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_INT4\_SWAP
4-byte integer
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_INT8\_SWAP
8-byte integer
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_REAL4\_SWAP
4-byte real
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_REAL8\_SWAP
8-byte real
./ sectionEnd


./ sectionStart

.SS Return Values

The content that had been at the 
.I "dest"
address on the remote PE
prior to the swap is returned.

./ sectionEnd


./ sectionStart

.SS API Notes

None.

./ sectionEnd



./ sectionStart
.SS Examples



The example below swaps values between odd numbered PEs and
their right (modulo) neighbor and outputs the result of swap.

.nf
#include <stdio.h>
#include <shmem.h>

int main(void)
{
  static long dest;
  shmem_init();
  int me = shmem_my_pe();
  int npes = shmem_n_pes();
  dest = me;
  shmem_barrier_all();
  long new_val = me;
  if (me & 1) {
     long swapped_val = shmem_atomic_swap(&dest, new_val, (me + 1) % npes);
     printf("%d: dest = %ld, swapped = %ld\\n", me, dest, swapped_val);
  }
  shmem_finalize();
  return 0;
}
.fi





.SS Table 3:
Extended AMO Types and Names
.TP 25
.B \TYPE
.B \TYPENAME
.TP
float
float
.TP
double
double
.TP
int
int
.TP
long
long
.TP
long long
longlong
.TP
unsigned int
uint
.TP
unsigned long
ulong
.TP
unsigned long long
ulonglong
.TP
int32\_t
int32
.TP
int64\_t
int64
.TP
uint32\_t
uint32
.TP
uint64\_t
uint64
.TP
size\_t
size
.TP
ptrdiff\_t
ptrdiff
