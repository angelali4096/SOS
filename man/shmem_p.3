.TH SHMEM_P 1 2017-06-06 "Intel Corp." "OpenSHEMEM Library Documentation"
.SH NAME
shmem_p \-  Copies one data item to a remote 
PE.
.SH SYNOPSIS
.nf
.B C11: 
void shmem_p(TYPE *dest, TYPE value, int pe);
.B C/C++: 
void shmem_<TYPENAME>_p(TYPE *dest, TYPE value, int pe);

* TYPE is one of the standard RMA types
* SIZE is one of 8, 16, 32, 128
.fi
.SH DESCRIPTION
.SS Arguments

.BR "IN " - 
.I dest
- The remotely accessible array element or scalar data object which will receive the data on the remote 
PE.

.BR "IN " - 
.I value
- The value to be transferred to 
.I dest
on the remote PE.

.BR "IN " - 
.I pe
- The number of the remote PE.
.SS API Description
These routines provide a very low latency put capability for single elements of most basic types.  

As with 
.BR "shmem\_put" ,
these routines start the remote transfer and may return before the data is delivered to the remote 
PE. Use 
.B shmem\_quiet
to force completion of all remote PUT
transfers.
.SS Return Values
None.
.SS API Notes
None.
.SS Example
 
The following example uses 
.B shmem\_p
in a C11 program.

./
.nf
#include <stdio.h>
#include <math.h>
#include <shmem.h>

int main(void)
{
  const double e = 2.71828182;
  const double epsilon = 0.00000001;
  static double f = 3.1415927;
  shmem_init();
  int me = shmem_my_pe();
  if (me == 0)
     shmem_p(&f, e, 1);
  shmem_barrier_all();
  if (me == 1)
     printf("%s\\n", (fabs(f - e) < epsilon) ? "OK" : "FAIL");
  shmem_finalize();
  return 0;
}

.fi



