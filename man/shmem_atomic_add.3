.TH SHMEM_ATOMIC_ADD 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_atomic_add \- 
Performs an atomic add operation on a remote symmetric data object.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C11:

.B void
.B shmem\_atomic\_add(TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



.B void
.B shmem\_atomic\_add(shmem_ctx_t
.IB "ctx" ,
.B TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the standard AMO types specified by
Table 2.
./ sectionStart
.SS C/C++:

.B void
.B shmem\_TYPENAME\_atomic\_add(TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



.B void
.B shmem\_ctx\_TYPENAME\_atomic\_add(shmem_ctx_t
.IB "ctx" ,
.B TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the standard AMO types and has a corresponding
TYPENAME specified by Table 2.


./ sectionStart
.B ***************DEPRECATED***************
./ sectionEnd

./ sectionStart
.SS C11:

.B void
.B shmem\_add(TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of \{int, long, long long\}.
./ sectionStart
.SS C/C++:

.B void
.B shmem\_TYPENAME\_add(TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of \{int, long, long long\}
and has a corresponding TYPENAME specified by Table 2.

./ sectionStart
.B ****************************************
./ sectionEnd

./ sectionStart

.B ***************DEPRECATED***************
.SS Fortran:

.nf

.BR "INTEGER " "pe"
.BR "INTEGER*4 " "value_i4"
.BR "CALL " "SHMEM\_INT4\_ADD(dest, value_i4, pe)"
.BR "INTEGER*8 " "value_i8"
.BR "CALL " "SHMEM\_INT8\_ADD(dest, value_i8, pe)"

.fi
.B ****************************************

./ sectionEnd




./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I ctx
- The context on which to perform the operation.
When this argument is not provided, the operation is performed on
SHMEM\_CTX\_DEFAULT.


.BR "OUT " -
.I dest
- The remotely accessible integer data object to be
updated on the remote PE. When using  C/C++, the type of
.I "dest"
should match that implied in the SYNOPSIS section.


.BR "IN " -
.I value
- The value to be atomically added to 
.IR "dest" .
When using  C/C++, the type of 
.I value
should match that implied in
the SYNOPSIS section. When using Fortran, it must be of type
integer with an element size of 
.IR "dest" .



.BR "IN " -
.I pe
- An integer that indicates the PE number upon which
.I "dest"
is to be updated. When using Fortran, it must be a default
integer value.
./ sectionEnd


./ sectionStart

.SS API Description

The 
.B shmem\_atomic\_add
routine performs an atomic add operation. It adds
.I value
to 
.I "dest"
on PE 
.I pe
and atomically updates the 
.I "dest"
without returning the value.

./ sectionEnd



./ sectionStart

When using Fortran, 
.I dest
and 
.I value
must be of the following type:

.TP 25
Routine
Data type of 
.I dest
and 
.I value

./ sectionEnd



./ sectionStart
.TP 25
SHMEM\_INT4\_ADD
4-byte integer
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_INT8\_ADD
8-byte integer
./ sectionEnd


./ sectionStart

.SS Return Values

None.

./ sectionEnd


./ sectionStart

.SS API Notes

None.

./ sectionEnd



./ sectionStart
.SS Examples





.nf
#include <stdio.h>
#include <shmem.h>

int main(void)
{
  static int dst = 22;
  shmem_init();
  int me = shmem_my_pe();
  if (me == 1)
     shmem_atomic_add(&dst, 44, 0);
  shmem_barrier_all();
  printf("%d: dst = %d\\n", me, dst);
  shmem_finalize();
  return 0;
}
.fi





.SS Table 2:
Standard AMO Types and Names
.TP 25
.B \TYPE
.B \TYPENAME
.TP
int
int
.TP
long
long
.TP
long long
longlong
.TP
unsigned int
uint
.TP
unsigned long
ulong
.TP
unsigned long long
ulonglong
.TP
int32\_t
int32
.TP
int64\_t
int64
.TP
uint32\_t
uint32
.TP
uint64\_t
uint64
.TP
size\_t
size
.TP
ptrdiff\_t
ptrdiff
