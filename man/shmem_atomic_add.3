.TH SHMEM_ATOMIC_ADD 1 2017-06-06 "Intel Corp." "OpenSHEMEM Library Documentation"
.SH NAME
shmem_atomic_add \-  Performs an atomic add operation on a remote symmetric data object.
.SH SYNOPSIS
.nf
.B C11: 
void shmem_atomic_add(TYPE *dest, TYPE value, int pe);
.B C/C++: 
void shmem_<TYPENAME>_atomic_add(TYPE *dest, TYPE value, int pe);

* TYPE is one of the extended AMO types
.B FORTRAN: 
INTEGER pe 
INTEGER*4  value_i4
CALL SHMEM_INT4_ADD(dest, value_i4, pe) 
INTEGER*8 value_i8
CALL SHMEM_INT8_ADD(dest, value_i8, pe)
.fi
.SH DESCRIPTION
.SS Arguments

.BR "OUT " - 
.I dest
- The remotely accessible integer data object to be  updated  on the remote 
PE.  If you are using C/C++, the type of  
.I dest
should match that implied in the SYNOPSIS section.

.BR "IN " - 
.I value
- The value to be atomically added to 
.IR "dest" . 
If you  are using C/C++, the type of 
.I value
should match that  implied  in  the SYNOPSIS  section.  If you are using Fortran, it must be of type integer with an element size of 
.IR "dest" .

.BR "IN " - 
.I pe
- An integer that indicates the 
PE
number upon which  
.I dest
is to be updated.  If you are using Fortran, it must be a default integer value.
.SS API Description
The 
.B shmem\_atomic\_add
routine performs an atomic add operation. It adds 
.I value
to 
.I dest
on 
PE
.I pe
and atomically updates the 
.I dest
without returning the value. 

If you are using Fortran, 
.I dest
must be of the following type:
.nf
Routine        | Data type of dest and source

SHMEM\_INT4\_ADD | 4-byte integer

SHMEM\_INT8\_ADD | 8-byte integer

.SS Return Values
None.
.SS API Notes
As of OpenSHMEM 1.4, 
.B shmem\_add
has been deprecated. Its behavior and call signature are identical to the replacement interface, 
.BR "shmem\_atomic\_add" .
.SS Example



./
.nf
#include <stdio.h>
#include <shmem.h>

int main(void)
{
  static int dst = 22;
  shmem_init();
  int me = shmem_my_pe();
  if (me == 1)
     shmem_atomic_add(&dst, 44, 0);
  shmem_barrier_all();
  printf("%d: dst = %d\\n", me, dst);
  shmem_finalize();
  return 0;
}

.fi



