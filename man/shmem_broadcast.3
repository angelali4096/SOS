.TH SHMEM_BROADCAST 1 2017-06-06 "Intel Corp." "OpenSHEMEM Library Documentation"
.SH NAME
shmem_broadcast \-  Broadcasts a block of data from one 
PE
to one or more destination PEs.
.SH SYNOPSIS
.nf
.B C/C++: 
void shmem_broadcast32(void *dest, const void *source, size_t nelems, 
      int PE_root, int PE_start, int logPE_stride, int PE_size, 
      long *pSync);
void shmem_broadcast64(void *dest, const void *source, size_t nelems, 
      int PE_root, int PE_start, int logPE_stride, int PE_size, 
      long *pSync);
.B FORTRAN: 
INTEGER nelems, PE_root, PE_start, logPE_stride, PE_size
INTEGER pSync(SHMEM_BCAST_SYNC_SIZE)
CALL SHMEM_BROADCAST4(dest, source, nelems, PE_root, PE_start, 
      logPE_stride, PE_size, pSync)
CALL SHMEM_BROADCAST8(dest, source, nelems, PE_root, PE_start, 
      logPE_stride, PE_size, pSync)
CALL SHMEM_BROADCAST32(dest, source, nelems, PE_root, PE_start, 
      logPE_stride, PE_size,pSync)
CALL SHMEM_BROADCAST64(dest, source, nelems, PE_root, PE_start, 
      logPE_stride, PE_size,pSync)
.fi
.SH DESCRIPTION
.SS Arguments

.BR "OUT " - 
.I dest
- A symmetric data object.

.BR "IN " - 
.I source
- A symmetric data object that can be of any data type that is permissible for the 
.I dest
argument.

.BR "IN " - 
.I nelems
- The number of elements in 
.IR "source" .  
For 
.B shmem\_broadcast32
and 
.BR "shmem\_broadcast4" ,
this is the number of 32-bit halfwords.  
.I nelems 
must be of type size\_t in C. If you are using Fortran, it must be a default integer value.

.BR "IN " - 
.I PE\_root
- Zero-based ordinal of the 
PE, with respect to the 
.IR "Active set" ,
from which the data is copied. Must be greater than or equal to 0 and less than 
.IR "PE\_size" .
.I PE\_root
must be of type integer. If you are using Fortran, it must be a default integer value.

.BR "IN " - 
.I PE\_start
- The lowest 
PE
number of the 
.I Active set
of PEs.  
.I PE\_start
must be of type integer. If you are using Fortran, it must be a default integer value.

.BR "IN " - 
.I logPE\_stride
- The log (base 2) of the stride between consecutive 
PE
numbers in the 
.IR "Active set" . 
.I log\_PE\_stride
must be of type integer. If you are using Fortran, it must be a default integer value.

.BR "IN " - 
.I PE\_size
- The number of PEs in the 
.IR "Active set" . 
PE\_size
must be of type integer. If you are using Fortran, it must be a default integer value.

.BR "IN " - 
.I pSync
- A symmetric work array.  In C/C++, 
.I pSync
must be of type long and size 
SHMEM\_BCAST\_SYNC\_SIZE. In Fortran, 
.I pSync
must be of type integer and size 
SHMEM\_BCAST\_SYNC\_SIZE. Every element of this array must be initialized with the value 
SHMEM\_SYNC\_VALUE
(in C/C++) or 
SHMEM\_SYNC\_VALUE
(in Fortran) before any of the PEs in  the 
.I Active set
enter 
.BR "shmem\_broadcast" .
.SS API Description
OpenSHMEM broadcast routines are collective routines. They copy data object 
.I source
on the processor specified by 
.I PE\_root
and store the values at 
.I dest
on the other PEs specified by the triplet 
.IR "PE\_start" ,
.IR "logPE\_stride" ,
.IR "PE\_size" .  
The data is not copied to the 
.I dest
area on the root 
PE.  

As with all OpenSHMEM collective routines, each of these routines assumes that only PEs in the 
.I Active set
call the routine. If a 
PE
not in the 
.I Active set
calls an OpenSHMEM collective routine, undefined behavior results.  

The values of arguments 
.IR "PE\_root" , 
.IR "PE\_start" ,
.IR "logPE\_stride" ,
and 
.IR "PE\_size"
must be equal on all PEs in the 
.IR "Active set" .  
The same 
.I dest
and 
.I source
data objects and the same 
.I pSync
work array must be passed to all PEs in the 
.IR "Active set" .  

Before any 
PE
calls a broadcast routine, you must ensure that the following conditions exist (synchronization via a barrier or some other method is often needed to ensure this): The 
.I pSync
array on all PEs in the 
.I Active set
is not still in use from a prior call to a broadcast routine.  The 
.I dest
array on all PEs in the 
.I Active set
is ready to accept the broadcast data.  

Upon return from a broadcast routine, the following are true for the local 
PE
: If the current 
PE
is not the root 
PE
, the 
.I dest
data object is updated. The 
.I source
data object may be safely reused. The values in the 
.I pSync
array are restored to the original values.

The  
.I dest
and 
.I source
data  objects must conform to certain typing constraints, which are as follows:
.nf
Routine            | Data type of dest and source

shmem\_broadcast8,  | Any noncharacter type that has an element
shmem\_broadcast64    size of 64 bits. No Fortran derived types 
                     or C/C++ structures are allowed.

shmem\_broadcast4,  | Any noncharacter type that has an element
shmem\_broadcast32    size of 32 bits. No Fortran derived types 
                     or C/C++ structures are allowed.

.SS Return Values
None.
.SS API Notes
All OpenSHMEM broadcast routines restore 
.I pSync
to its original contents. Multiple calls to OpenSHMEM routines that use the same 
.I pSync
array do not require that 
.I pSync
be reinitialized after the first call. 

You must ensure the that the 
.I pSync
array is not being updated by any 
PE
in the 
.I Active set
while any of the PEs participates in processing of an OpenSHMEM broadcast routine. Be careful to avoid these situations: If the 
.I pSync
array is initialized at run time, some type of synchronization is needed to ensure that all PEs in the 
.I Active set
have initialized 
.I pSync
before any of them enter an OpenSHMEM routine called with the 
.I pSync
synchronization array. A 
.I pSync
array may be reused on a subsequent OpenSHMEM broadcast routine only if none of the PEs in the 
.I Active set
are still processing a prior OpenSHMEM broadcast routine call that used the same 
.I pSync
array.  In general, this can be ensured only by doing some type of synchronization.  
.SS Example

In the following examples, the call to 
.B shmem\_broadcast64
copies 
.I source
on 
PE
4 to 
.I dest
on PE 5, 6, and 7.

C/C++ example:

./
.nf
#include <stdio.h>
#include <stdlib.h>
#include <shmem.h>

int main(void)
{
  static long pSync[SHMEM_BCAST_SYNC_SIZE];
  for (int i = 0; i < SHMEM_BCAST_SYNC_SIZE; i++)
     pSync[i] = SHMEM_SYNC_VALUE;
  static long source[4], dest[4];

  shmem_init();
  int me = shmem_my_pe();
  int npes = shmem_n_pes();

  if (me == 0)
     for (int i = 0; i < 4; i++)
        source[i] = i;

  shmem_broadcast64(dest, source, 4, 0, 0, 0, npes, pSync);
  printf("%d: %ld, %ld, %ld, %ld\\n", me, dest[0], dest[1],
                                         dest[2], dest[3]);
  shmem_finalize();
  return 0;
}

.fi




Fortran example:

./
.nf
INCLUDE "shmem.fh"

INTEGER PSYNC(SHMEM_BCAST_SYNC_SIZE)
INTEGER DEST, SOURCE, NLONG, PE_ROOT, PE_START,
&   LOGPE_STRIDE, PE_SIZE, PSYNC
COMMON /COM/ DEST, SOURCE

DATA PSYNC /SHMEM_BCAST_SYNC_SIZE*SHMEM_SYNC_VALUE/

CALL SHMEM_BROADCAST64(DEST, SOURCE, NLONG, 0, 4, 0, 4, PSYNC)


.fi



