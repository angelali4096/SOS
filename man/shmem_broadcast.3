.TH SHMEM_BROADCAST 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_broadcast \- 
Broadcasts a block of data from one PE to one or more destination
PEs.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C/C++:

.B void
.B shmem\_broadcast32(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.IB "PE_root" ,
.B int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



.B void
.B shmem\_broadcast64(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.IB "PE_root" ,
.B int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



./ sectionEnd



./ sectionStart

.B ***************DEPRECATED***************
.SS Fortran:

.nf

.BR "INTEGER " "nelems, PE_root, PE_start, logPE_stride, PE_size"
.BR "INTEGER " "pSync(SHMEM_BCAST_SYNC_SIZE)"
.BR "CALL " "SHMEM\_BROADCAST4(dest, source, nelems, PE_root, PE_start, logPE_stride, PE_size, pSync)"
.BR "CALL " "SHMEM\_BROADCAST8(dest, source, nelems, PE_root, PE_start, logPE_stride, PE_size, pSync)"
.BR "CALL " "SHMEM\_BROADCAST32(dest, source, nelems, PE_root, PE_start, logPE_stride, PE_size,pSync)"
.BR "CALL " "SHMEM\_BROADCAST64(dest, source, nelems, PE_root, PE_start, logPE_stride, PE_size,pSync)"

.fi
.B ****************************************

./ sectionEnd





./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "OUT " -
.I dest
- A symmetric data object. 


.BR "IN " -
.I source
- A symmetric data object that can be of any data type
that is permissible for the 
.I "dest"
argument.


.BR "IN " -
.I nelems
- The number of elements in 
.IR "source" .
For
.B shmem\_broadcast32
and 
.BR "shmem\_broadcast4" ,
this is the number of
32-bit halfwords. nelems must be of type 
.I size\_t
in C. When
using Fortran, it must be a default integer value.


.BR "IN " -
.I PE\_root
- Zero-based ordinal of the PE, with respect to
the active set,from which the data is copied. Must be greater than or equal to
0 and less than 
.IR "PE\_size" .
.I PE\_root
must be of type integer. When using Fortran, it must be a default integer value.


.BR "IN " -
.I PE\_start
- The lowest PE number of the active set of
PEs. 
.I PE\_start
must be of type integer. When using Fortran,
it must be a default integer value.


.BR "IN " -
.I logPE\_stride
-  The log (base 2) of the stride between
consecutive PE numbers in the active set. 
.I log\_PE\_stride
must be of
type integer. When using Fortran, it must be a default integer value.


.BR "IN " -
.I PE\_size
-  The number of PEs in the active set.
.I PE\_size
must be of type integer. When using Fortran, it must be a
default integer value.


.BR "IN " -
.I pSync
- 
A symmetric work array of size SHMEM\_BCAST\_SYNC\_SIZE.
In  C/C++, 
.I pSync
must be an array of elements of type long.
In Fortran, 
.I pSync
must be an array of elements of default integer type.
Every element of this array must be initialized with the value
SHMEM\_SYNC\_VALUE before any of the PEs in the active set
enters 
.BR "shmem\_broadcast" .

./ sectionEnd


./ sectionStart

.SS API Description

OpenSHMEM broadcast routines are collective routines. They copy data object
.I "source"
on the processor specified by 
.I PE\_root
and store the values at
.I "dest"
on the other PEs specified by the triplet 
.I PE\_start
,
.I logPE\_stride
, 
.IR "PE\_size" .
The data is not copied to the 
.I "dest"
area
on the root PE.

As with all OpenSHMEM collective routines, each of these routines assumes that
only PEs in the active set call the routine. If a PE not in the
active set calls an OpenSHMEM collective routine, the behavior is undefined.

The values of arguments 
.I PE\_root
, 
.I PE\_start
, 
.I logPE\_stride
,
and 
.I PE\_size
must be the same value on all PEs in the active set. The same
.I "dest"
and 
.I "source"
data objects and the same 
.I pSync
work array must be
passed by all PEs in the active set.

Before any PE calls a broadcast routine,
the following conditions must be ensured:

.IP


\(bu The 
.I pSync
array on all PEs in the active set is
not still in use from a prior call to a broadcast routine.

\(bu The 
.I "dest"
array on all PEs in the active set is ready
to accept the broadcast data.

.RE
Otherwise, the behavior is undefined.

Upon return from a broadcast routine, the following are true for the local
PE:

.IP


\(bu If the current PE is not the root PE,
the 
.I "dest"
data object is updated.

\(bu The 
.I "source"
data object may be safely reused.

\(bu The values in the 
.I pSync
array are restored to the
original values.

.RE

./ sectionEnd



./ sectionStart

The 
.I "dest"
and 
.I "source"
data objects must conform to certain typing
constraints, which are as follows:

.TP 25
Routine
Data type of 
.I dest
and 
.I source

./ sectionEnd



./ sectionStart
.TP 25
shmem\_broadcast8, shmem\_broadcast64
Any noncharacter type that has an element size of 64 bits. No Fortran derived types or  C/C++ structures are allowed.
./ sectionEnd


./ sectionStart
.TP 25
shmem\_broadcast4, shmem\_broadcast32
Any noncharacter type that has an element size of 32 bits. No Fortran derived types or  C/C++ structures are allowed.
./ sectionEnd


./ sectionStart

.SS Return Values

None.

./ sectionEnd


./ sectionStart

.SS API Notes

All OpenSHMEM broadcast routines restore 
.I pSync
to its original contents.
Multiple calls to OpenSHMEM routines that use the same 
.I pSync
array do not
require that 
.I pSync
be reinitialized after the first call.

The user must ensure that the 
.I pSync
array is not being updated by any
PE in the active set while any of the PEs participates in processing
of an OpenSHMEM broadcast routine. Be careful to avoid these situations: If the
.I pSync
array is initialized at run time, before its first use, some type of synchronization is
needed to ensure that all PEs in the active set have initialized
.I pSync
before any of them enter an OpenSHMEM routine called with the
.I pSync
synchronization array. A 
.I pSync
array may be reused on a
subsequent OpenSHMEM broadcast routine only if none of the PEs in the
active set are still processing a prior OpenSHMEM broadcast routine call that
used the same 
.I pSync
array. In general, this can be ensured only by doing
some type of synchronization. 

./ sectionEnd



./ sectionStart
.SS Examples



In the following examples, the call to 
.B shmem\_broadcast64
copies 
.I "source"
on PE 4 to 
.I "dest"
on PEs 5, 6, and 7. 

C/C++ example:

.nf
#include <stdio.h>
#include <stdlib.h>
#include <shmem.h>

int main(void)
{
  static long pSync[SHMEM_BCAST_SYNC_SIZE];
  for (int i = 0; i < SHMEM_BCAST_SYNC_SIZE; i++)
     pSync[i] = SHMEM_SYNC_VALUE;
  static long source[4], dest[4];

  shmem_init();
  int me = shmem_my_pe();
  int npes = shmem_n_pes();

  if (me == 0)
     for (int i = 0; i < 4; i++)
        source[i] = i;

  shmem_broadcast64(dest, source, 4, 0, 0, 0, npes, pSync);
  printf("%d: %ld, %ld, %ld, %ld\\n", me, dest[0], dest[1], dest[2], dest[3]);
  shmem_finalize();
  return 0;
}
.fi



Fortran example:

.nf
INCLUDE "shmem.fh"

INTEGER PSYNC(SHMEM_BCAST_SYNC_SIZE)
INTEGER DEST, SOURCE, NLONG, PE_ROOT, PE_START,
&   LOGPE_STRIDE, PE_SIZE, PSYNC
COMMON /COM/ DEST, SOURCE

DATA PSYNC /SHMEM_BCAST_SYNC_SIZE*SHMEM_SYNC_VALUE/

CALL SHMEM_BROADCAST64(DEST, SOURCE, NLONG, 0, 4, 0, 4, PSYNC)


.fi





