.TH SHMEM_GET 1 2017-06-06 "Intel Corp." "OpenSHEMEM Library Documentation"
.SH NAME
shmem_get \-  Copies data from a specified PE.
.SH SYNOPSIS
.nf
.B C11: 
void shmem_get(TYPE *dest, const TYPE *source, size_t nelems, int pe);
.B C/C++: 
void shmem_<TYPENAME>_get(TYPE *dest, const TYPE *source, 
      size_t nelems, int pe);
void shmem_get<SIZE>(void *dest, const void *source, 
      size_t  nelems, int pe);
void shmem_getmem(void *dest, const void *source, 
      size_t nelems, int pe);

* TYPE is one of the standard RMA types
* SIZE is one of 8, 16, 32, 128
.B FORTRAN: 
INTEGER nelems, pe
CALL SHMEM_CHARACTER_GET(dest, source, nelems, pe)
CALL SHMEM_COMPLEX_GET(dest, source, nelems, pe)
CALL SHMEM_DOUBLE_GET(dest, source, nelems, pe)
CALL SHMEM_GET4(dest, source, nelems, pe)
CALL SHMEM_GET8(dest, source, nelems, pe)
CALL SHMEM_GET32(dest, source, nelems, pe)
CALL SHMEM_GET64(dest, source, nelems, pe)
CALL SHMEM_GET128(dest, source, nelems, pe)
CALL SHMEM_GETMEM(dest, source, nelems, pe)
CALL SHMEM_INTEGER_GET(dest, source, nelems, pe)
CALL SHMEM_LOGICAL_GET(dest, source, nelems, pe)
CALL SHMEM_REAL_GET(dest, source, nelems, pe)
.fi
.SH DESCRIPTION
.SS Arguments

.BR "OUT " - 
.I dest
- Local data object to be updated.

.BR "IN " - 
.I source
- Data object on the PE identified by 
.I pe
that contains the data to be copied.  This data object must be remotely  accessible.

.BR "IN " - 
.I nelems
- Number of elements in the 
.I dest
and 
.I source
arrays. 
.I nelems
must be of type 
size\_t
for C. If you are  using Fortran, it must be a constant, variable, or array element of default integer type.

.BR "IN " - 
.I pe
- PE number of the remote PE.  
.I pe
must  be of type integer. If you are using Fortran, it must be a constant, variable, or array element of default integer type.
.SS API Description
The get routines provide a method for copying a contiguous symmetric data object from a different PE to a contiguous data object on the local PE. The routines return after the data has been delivered to the
.I dest
array on the local 
PE. 

The 
.I dest
and 
.I source
data objects must conform to typing constraints, which are as follows:

.nf
Routine      | Data type of dest and source

shmem\_getmem | Fortran: Any noncharacter type. 
               C: Any data type. nelems is scaled in bytes.

shmem\_get4,  | Any noncharacter type that has a storage size equal to
shmem\_get32    32 bits.

shmem\_get8   | C: Any noncharacter type that has a storage size equal 
               to 8 bits.
               Fortran: Any noncharacter type that has a storage size 
               equal to 64 bits.

shmem\_get64  | Any noncharacter type that has a storage size equal to 
               64 bits.

shmem\_get128 | Any noncharacter type that has a storage size equal to 
               128 bits.

SHMEM\_CHARACTER\_GET | Elements of type character. nelems is the number  
                      of characters  to transfer. The actual character 
                      lengths of the source and dest variables are 
                      ignored.

SHMEM\_COMPLEX\_GET   | Elements of type complex of default size.

SHMEM\_DOUBLE\_GET    | Fortran: Elements of type double precision.

SHMEM\_INTEGER\_GET   | Elements of type integer.

SHMEM\_LOGICAL\_GET   | Elements of type logical.

SHMEM\_REAL\_GET      | Elements of type real.
.SS Return Values
None.
.SS API Notes
If you are using Fortran, data types must be of default size. For example, a real variable must be declared as REAL, REAL*4, or REAL(KIND=KIND(1.0)).
.SS Example

Consider this example for Fortran.

./
.nf
PROGRAM REDUCTION
INCLUDE "shmem.fh"

REAL VALUES, SUM
COMMON /C/ VALUES
REAL WORK
CALL SHMEM_INIT()             ! ALLOW ANY NUMBER OF PES
VALUES = SHMEM_MY_PE()              ! INITIALIZE IT TO SOMETHING
CALL SHMEM_BARRIER_ALL
SUM = 0.0
DO I = 0, SHMEM_N_PES()-1
  CALL SHMEM_REAL_GET(WORK, VALUES, (SHMEM_N_PES()()-1), I)
  SUM = SUM + WORK
ENDDO
PRINT*,'PE ',SHMEM_MY_PE(),' COMPUTED SUM=',SUM
CALL SHMEM_BARRIER_ALL
END
.fi



