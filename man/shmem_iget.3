.TH SHMEM_IGET 1 2017-06-06 "Intel Corp." "OpenSHEMEM Library Documentation"
.SH NAME
shmem_iget \-  Copies strided data from a specified PE.
.SH SYNOPSIS
.nf
.B C11: 
void shmem_iget(TYPE *dest, const TYPE *source, ptrdiff_t dst, 
      ptrdiff_t sst, size_t nelems, int pe);
.B C/C++: 
void shmem_<TYPENAME>_iget(TYPE *dest, const TYPE *source, 
			ptrdiff_t dst, ptrdiff_t sst, size_t nelems, int pe);
void shmem_iget<SIZE>(void *dest, const void *source, ptrdiff_t dst, 
			ptrdiff_t sst, size_t  nelems, int pe);

* TYPE is one of the standard RMA types
* SIZE is one of 8, 16, 32, 128
.B FORTRAN: 
INTEGER dst, sst, nelems, pe
CALL SHMEM_COMPLEX_IGET(dest, source, dst, sst, nelems, pe)
CALL SHMEM_DOUBLE_IGET(dest, source, dst, sst, nelems, pe)
CALL SHMEM_IGET4(dest, source, dst, sst, nelems, pe)
CALL SHMEM_IGET8(dest, source, dst, sst, nelems, pe)
CALL SHMEM_IGET32(dest, source, dst, sst, nelems, pe)
CALL SHMEM_IGET64(dest, source, dst, sst, nelems, pe)
CALL SHMEM_IGET128(dest, source, dst, sst, nelems, pe)
CALL SHMEM_INTEGER_IGET(dest, source, dst, sst, nelems, pe)
CALL SHMEM_LOGICAL_IGET(dest, source, dst, sst, nelems, pe)
CALL SHMEM_REAL_IGET(dest, source, dst, sst, nelems, pe)
.fi
.SH DESCRIPTION
.SS Arguments

.BR "OUT " - 
.I dest
- Array to be updated on the local PE. 

.BR "IN " - 
.I source
- Array containing the data to be copied on the remote PE.

.BR "IN " - 
.I dst
- The stride between consecutive elements of the 
.I dest
array. The stride is scaled by the element size of the 
.I dest
array. A value of 1indicates contiguous data. 
.I dst
must be of type ptrdiff\_t. If you are calling from Fortran, it must be a default integer value.

.BR "IN " - 
.I sst
- The stride between consecutive elements of the 
.I source
array. The stride is scaled by the element size of the 
.I source
array. A value of 1indicates contiguous data.  
.I sst
must be  of type ptrdiff\_t. If you are calling from Fortran, it must be a default integer value.

.BR "IN " - 
.I nelems
- Number of elements in the 
.I dest
and 
.I source
arrays.  
.I nelems
must be of type size\_t for C. If you are  using Fortran, it must be a constant, variable, or array element of default integer type.

.BR "IN " - 
.I pe
- PE number of the remote PE.  
.I pe
must be of type integer. If you are using Fortran, it must be a constant, variable, or array element of default integer type.
.SS API Description
The 
.B iget
routines provide a method for copying strided data elements from a symmetric array from a specified remote PE to strided locations on a local array. The routines return when the data has been copied into the local 
.I dest
array.

The 
.I dest
and 
.I source
data objects must conform to typing constraints, which are as follows:
.nf
Routine       | Data type of dest and source

shmem\_iget4,  | Any noncharacter type that has a storage size equal 
shmem\_iget32    to 32 bits

shmem\_iget8   | C: Any noncharacter type that has a storage size equal 
                to 8 bits.
                Fortran: Any noncharacter type that has a storage size 
                equal to 64 bits.

shmem\_iget64  | Any noncharacter type that has a storage size equal to 
                64 bits.

shmem\_iget128 | Any noncharacter type that has a storage size equal to 
                128 bits.

SHMEM\_COMPLEX\_IGET | Elements of type complex of default size.

SHMEM\_DOUBLE\_IGET  | Fortran: Elements of type double precision.

SHMEM\_INTEGER\_IGET | Elements of type integer.

SHMEM\_LOGICAL\_IGET | Elements of type logical.

SHMEM\_REAL\_IGET    | Elements of type real.
.SS Return Values
None.
.SS API Notes
If you are using Fortran, data types must be of default size. For example, a real variable must be declared as REAL, REAL*4, or REAL(KIND=KIND(1.0)). 
.SS Example

The following example uses 
.B shmem\_logical\_iget
in a Fortran program.
 
./
.nf
PROGRAM STRIDELOGICAL
INCLUDE "shmem.fh"

LOGICAL SOURCE(10), DEST(5)
SAVE SOURCE   ! SAVE MAKES IT REMOTELY ACCESSIBLE
DATA SOURCE /.T.,.F.,.T.,.F.,.T.,.F.,.T.,.F.,.T.,.F./
DATA DEST / 5*.F. /
CALL SHMEM_INIT()
IF (SHMEM_MY_PE() .EQ. 0) THEN
  CALL SHMEM_LOGICAL_IGET(DEST, SOURCE, 1, 2, 5, 1)
  PRINT*,'DEST AFTER SHMEM_LOGICAL_IGET:',DEST
ENDIF
CALL SHMEM_BARRIER_ALL
.fi



