.TH SHMEM_ATOMIC_INC 1 2017-06-06 "Intel Corp." "OpenSHEMEM Library Documentation"
.SH NAME
shmem_atomic_inc \-  Performs an atomic increment operation on a remote data object.
.SH SYNOPSIS
.nf
.B C11: 
void shmem_atomic_inc(TYPE *dest, int pe);
.B C/C++: 
void shmem_<TYPENAME>_atomic_inc(TYPE *dest, int pe);

* TYPE is one of the extended AMO types
.B FORTRAN: 
INTEGER pe
CALL SHMEM_INT4_INC(dest, pe)
CALL SHMEM_INT8_INC(dest, pe)
.fi
.SH DESCRIPTION
.SS Arguments

.BR "IN " - 
.I dest
- The remotely accessible integer data object to be updated on the remote 
PE. The type of 
.I dest
should match that implied in the SYNOPSIS section.

.BR "IN " - 
.I pe
- An integer that indicates the 
PE
number on which 
.I dest
is to be  updated. If you are using Fortran, it must be a default integer value.
.SS API Description
These  routines perform  an atomic increment operation on the 
.I dest
data object on 
PE.

If you are using Fortran, 
.I dest
must be of the following type:
.nf
Routine          | Data type of dest and source

SHMEM_INT4_INC   | 4-byte integer

SHMEM_INT8_INC   | 8-byte integer

.SS Return Values
None.
.SS API Notes
As of OpenSHMEM 1.4, 
.B shmem\_inc
has been deprecated. Its behavior and call signature are identical to the replacement interface, 
.BR "shmem\_atomic\_inc" .
.SS Example

The following 
.B shmem\_atomic\_inc
example is for C11 programs: 

./
.nf
#include <stdio.h>
#include <shmem.h>

int main(void)
{
  static int dst = 74;
  shmem_init();
  int me = shmem_my_pe();
  if (me == 0)
     shmem_atomic_inc(&dst, 1);
  shmem_barrier_all();
  printf("%d: dst = %d\\n", me, dst);
  shmem_finalize();
  return 0;
}

.fi



