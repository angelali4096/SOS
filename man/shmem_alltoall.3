.TH SHMEM_ALLTOALL 1 2017-06-06 "Intel Corp." "OpenSHEMEM Library Documentation"
.SH NAME
shmem_alltoall \-  shmem\_alltoall is a collective routine where each 
PE
exchanges a fixed amount of data with all other PEs in the 
.I "Active set" .
.SH SYNOPSIS
.nf
.B C/C++: 
void shmem_alltoall32(void *dest, const void *source, size_t nelems, 
      int PE_start, int logPE_stride, int PE_size, long *pSync);
void shmem_alltoall64(void *dest, const void *source, size_t nelems, 
      int PE_start, int logPE_stride, int PE_size, long *pSync);
.B FORTRAN: 
INTEGER pSync(SHMEM_ALLTOALL_SYNC_SIZE)
INTEGER PE_start, logPE_stride, PE_size, nelems
CALL SHMEM_ALLTOALL32(dest, source, nelems, PE_start, 
      logPE_stride, PE_size, pSync)
CALL SHMEM_ALLTOALL64(dest, source, nelems, PE_start, 
      logPE_stride, PE_size, pSync)
.fi
.SH DESCRIPTION
.SS Arguments

.BR "OUT " - 
.I dest
- A symmetric data object large enough to receive the combined total of 
.I nelems
elements from each 
PE
in the 
.IR "Active set" .

.BR "IN " - 
.I source
- A symmetric data object that contains 
.I nelems
elements of data for each 
PE
in the 
.IR "Active set" ,
ordered according to destination 
PE.

.BR "IN " - 
.I nelems
- The number of elements to exchange for each 
PE. 
.I nelems
must be of type size\_t for C/C++.  If you are using Fortran, it must be a default integer value.

.BR "IN " - 
.I PE\_start
- The lowest 
PE
number of the 
.I Active set
of PEs.  
.I PE\_start
must be of type integer.  If you are using Fortran, it must be a default integer value.

.BR "IN " - 
.I logPE\_stride
- The log (base 2) of the stride between consecutive 
PE
numbers in the 
.IR "Active set" .  
.I logPE\_stride
must be of type integer.  If you are using Fortran, it must be a default integer value.

.BR "IN " - 
.I PE\_size
- The number of PE in the 
.IR "Active set" . 
.I PE\_size
must be of type integer.  If you are using Fortran, it must be a default integer value.

.BR "IN " - 
.I pSync
- A symmetric work array. In C/C++, 
.I pSync
must be of type long and size 
SHMEM\_ALLTOALL\_SYNC\_SIZE. In Fortran, 
.I pSync
must be of type integer and size 
SHMEM\_ALLTOALL\_SYNC\_SIZE.  If you are using Fortran, it must be a default integer value. Every element of this array must be initialized with the value 
SHMEM\_SYNC\_VALUE
before any of the PEs in the 
.I Active set
enter the routine.
.SS API Description
The 
.B shmem\_alltoall
routines are collective routines. Each 
PE
in the 
.I Active set
exchanges 
.I nelems
data elements of size 32 bits (for 
.BR "shmem\_alltoall32" )
or 64 bits (for 
.BR "shmem\_alltoall64" )
with all other PEs in the set. The data being sent and received are stored in a contiguous symmetric data object. The total size of each PE 
.I source
object and 
.I dest
object is 
.I nelems
times the size of an element (32 bits or 64 bits) times 
.IR "PE\_size" .
The 
.I source
object contains 
.I PE\_size
blocks of data (the size of each block defined by 
.I nelems
) and each block of data is sent to a different 
PE.  Given a 
PE
.I i
that is the kth PE in the active set and a 
PE
.I j
that is the lth 
PE
in the 
.IR "Active set" , 
PE 
.I i
sends the lth block of its 
.I source
object to the kth block of the 
.I dest
object of 
PE 
.IR "j" . 

As with all OpenSHMEM collective routines, this routine assumes that only PEs in the 
.I Active set 
call the routine.  If a 
PE
not in the 
.I Active set
calls an OpenSHMEM collective routine, undefined behavior results. 

The values of arguments 
.IR "nelems" ,
.IR "PE\_start" ,
.IR "logPE\_stride" ,
and 
.I PE\_size
must be equal on all PEs in the 
.IR "Active set" . 
The same 
.I dest
and 
.I source
data objects, and the same 
.I pSync
work array must be passed to all PEs in the 
.IR "Active set" . 

Before any 
PE
calls a 
.B shmem\_alltoall
routine, the following conditions must exist (synchronization via a barrier or some other method is often needed to ensure this): The 
.I pSync
array on all PEs in the 
.I Active set
is not still in use from a prior call to a 
.B shmem\_alltoalls
routine.  The 
.I dest
data object on all PEs in the 
.I Active set
is ready to accept the 
.B shmem\_alltoall
data. 

Upon return from a 
.B shmem\_alltoall
routine, the following is true for the local PE: Its 
.I dest
symmetric data object is completely updated and the data has been copied out of the 
.I source
data object. The values in the 
.I pSync
array are restored to the original values.

The  
.I dest
and 
.I source
data  objects must conform to certain typing constraints, which are as follows:
.nf 
Routine          | Data type of dest and source

shmem\_alltoall64 | 64 bits aligned.

shmem\_alltoall32 | 32 bits aligned.
.SS Return Values
None.
.SS API Notes
This routine restores 
.I pSync
to its original contents.  Multiple calls to OpenSHMEM routines that use the same 
.I pSync
array do not require that 
.I pSync
be reinitialized after the first call. You must ensure that the 
.I pSync
array is not being updated by any 
PE
in the 
.I Active set
while any of the PEs participates in processing of an OpenSHMEM
.B shmem\_alltoall
routine. Be careful to avoid these situations: If the 
.I pSync
array is initialized at run time, some type of synchronization is needed to ensure that all PEs in the 
.I Active set
have initialized 
.I pSync
before any of them enter an OpenSHMEM routine called with the 
.I pSync
synchronization array.  A 
.I pSync
array may be reused on a subsequent OpenSHMEM 
.B shmem\_alltoall
routine only if none of the PEs in the 
.I Active set
are still processing a prior OpenSHMEM
.B shmem\_alltoall
routine call that used the same 
.I pSync
array.  In general, this can be ensured only by doing some type of synchronization.
.SS Example

This example shows a 
.B shmem\_alltoall64
on two long elements among all PEs.

./
.nf
#include <stdio.h>
#include <inttypes.h>
#include <shmem.h>

int main(void)
{
  static long pSync[SHMEM_ALLTOALL_SYNC_SIZE];
  for (int i = 0; i < SHMEM_ALLTOALL_SYNC_SIZE; i++)
     pSync[i] = SHMEM_SYNC_VALUE;

  shmem_init();
  int me = shmem_my_pe();
  int npes = shmem_n_pes();

  const int count = 2;
  int64_t* dest = 
        (int64_t*) shmem_malloc(count * npes * sizeof(int64_t));
  int64_t* source = 
        (int64_t*) shmem_malloc(count * npes * sizeof(int64_t));

  /* assign source values */
  for (int pe = 0; pe < npes; pe++) {
     for (int i = 0; i < count; i++) {
        source[(pe * count) + i] = me + pe;
        dest[(pe * count) + i] = 9999;
     }
  }
  /* wait for all PEs to update source/dest */
  shmem_barrier_all();

  /* alltoall on all PES */
  shmem_alltoall64(dest, source, count, 0, 0, npes, pSync);

  /* verify results */
  for (int pe = 0; pe < npes; pe++) {
     for (int i = 0; i < count; i++) {
        if (dest[(pe * count) + i] != pe + me) {
           printf("[%d] ERROR: dest[%d]=%" PRId64 ", should be %d\\n",
              me, (pe * count) + i, dest[(pe * count) + i], pe + me);
          }  
      }
  }  
      
  shmem_free(dest);
  shmem_free(source);
  shmem_finalize();
  return 0;
}

.fi



