.TH SHMEM_FINALIZE 1 2017-06-06 "Intel Corp." "OpenSHEMEM Library Documentation"
.SH NAME
shmem_finalize \-  A collective operation that releases resources used by the OpenSHMEM library. This only terminates the OpenSHMEM portion of a program, not the entire program.
.SH SYNOPSIS
.nf
.B C/C++: 
void shmem_finalize(void);
.B FORTRAN: 
CALL SHMEM_FINALIZE()
.fi
.SH DESCRIPTION
.SS Arguments
 
None.




.SS API Description
 
.B shmem\_finalize
is a collective operation that ends the OpenSHMEM portion of a program previously initialized by 
.B shmem\_init
and releases resources used by the OpenSHMEM library. This collective operation requires all PEs to participate in the call. There is an implicit global barrier in 
.B shmem\_finalize
so that pending communications are completed, and no resources can be released until all PEs have entered 
.BR "shmem\_finalize" .

.B shmem\_finalize
must be the last OpenSHMEM library call encountered in the OpenSHMEM portion of a program. A call to 
.B shmem\_finalize
will release any resources initialized by a corresponding call to 
.BR "shmem\_init" .
All processes that represent the PEs will still exist after the call to 
.B shmem\_finalize
returns, but they will no longer have access to any resources that have been released.
.SS Return Values
None.
.SS API Notes
 
.B shmem\_finalize
releases all resources used by the OpenSHMEM library including the symmetric memory heap and pointers initiated by 
.BR "shmem\_ptr" .
This collective operation requires all PEs to participate in the call, not just a subset of the PEs. The non-OpenSHMEM portion of a program may continue after a call to 
.B shmem\_finalize
by all PEs. There is an implicit 
.B shmem\_finalize
at the end of main, so that having an explicit call to 
.B shmem\_finalize
is optional. However, an explicit 
.B shmem\_finalize
may be required as an entry point for wrappers used by profiling or other tools that need to perform their own finalization.
.SS Example
 
The following finalize example is for C11 programs:
 
./
.nf
#include <stdio.h>
#include <shmem.h> 

int main(void)
{
   static long x = 10101;
   long y = -1;

   shmem_init();
   int me = shmem_my_pe();
   int npes = shmem_n_pes();

   if (me == 0)
      y = shmem_g(&x, npes-1);

   printf("%d: y = %ld\\n", me, y); 

   shmem_finalize();  
   return 0;
}

.fi

 

