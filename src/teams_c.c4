/* -*- C -*-
 *
 * Copyright (c) 2019 Intel Corporation. All rights reserved.
 * This software is available to you under the BSD license.
 *
 * This file is part of the Sandia OpenSHMEM software package. For license
 * information, see the LICENSE file in the top level directory of the
 * distribution.
 *
 */

#include "config.h"

#define SHMEM_INTERNAL_INCLUDE
#include "shmem.h"
#include "shmemx.h"

#include "shmem_team.h"

/* Team Managment Routines */

int SHMEM_FUNCTION_ATTRIBUTES
shmemx_team_my_pe(shmemx_team_t team)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    if (team == SHMEMX_TEAM_INVALID)
        return -1;
    else
        return ((shmem_internal_team_t *)team)->my_pe;
}

int SHMEM_FUNCTION_ATTRIBUTES
shmemx_team_n_pes(shmemx_team_t team)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    if (team == SHMEMX_TEAM_INVALID)
        return -1;
    else
        return ((shmem_internal_team_t *)team)->size;
}

void SHMEM_FUNCTION_ATTRIBUTES
shmemx_team_get_config(shmemx_team_t team, shmemx_team_config_t *config)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    if (team == SHMEMX_TEAM_INVALID)
        return;

    shmem_internal_team_t *myteam = (shmem_internal_team_t *)team;
    *config = myteam->config;
    return;
}

int SHMEM_FUNCTION_ATTRIBUTES
shmemx_team_translate_pe(shmemx_team_t src_team, int src_pe, shmemx_team_t dest_team)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    return shmem_internal_team_translate_pe((shmem_internal_team_t *)src_team,
                                            src_pe, (shmem_internal_team_t *)dest_team);
}

int SHMEM_FUNCTION_ATTRIBUTES
shmemx_team_split_strided(shmemx_team_t parent_team, int PE_start,
                          int PE_stride, int PE_size, const shmemx_team_config_t
                          *config, long config_mask, shmemx_team_t *new_team)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    return shmem_internal_team_split_strided((shmem_internal_team_t *)parent_team,
                                             PE_start, PE_stride, PE_size, config,
                                             config_mask, (shmem_internal_team_t **)new_team);
}

int SHMEM_FUNCTION_ATTRIBUTES
shmemx_team_split_2d(shmemx_team_t parent_team, int xrange,
                     const shmemx_team_config_t *xaxis_config, long xaxis_mask,
                     shmemx_team_t *xaxis_team, const shmemx_team_config_t *yaxis_config,
                     long yaxis_mask, shmemx_team_t *yaxis_team)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    return shmem_internal_team_split_2d((shmem_internal_team_t *)parent_team,
                                        xrange, xaxis_config, xaxis_mask,
                                        (shmem_internal_team_t **)xaxis_team,
                                        yaxis_config, yaxis_mask,
                                        (shmem_internal_team_t **)yaxis_team);
}

int SHMEM_FUNCTION_ATTRIBUTES
shmemx_team_destroy(shmemx_team_t team)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    if ((shmem_internal_team_t *)team == &shmem_internal_team_world ||
        (shmem_internal_team_t *)team == &shmem_internal_team_shared)
        RAISE_ERROR_STR("Cannot destroy a pre-defined team");

    return shmem_internal_team_destroy((shmem_internal_team_t *)team);
}

int SHMEM_FUNCTION_ATTRIBUTES
shmemx_team_create_ctx(shmemx_team_t team, long options, shmem_ctx_t *ctx)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    if (team == SHMEMX_TEAM_INVALID) {
        *ctx = SHMEMX_CTX_INVALID;
        return -1;
    }

    int ret = shmem_transport_ctx_create((shmem_internal_team_t *) team,
                                         options, (shmem_transport_ctx_t **) ctx);
    return ret;
}

int SHMEM_FUNCTION_ATTRIBUTES
shmemx_ctx_get_team(shmem_ctx_t ctx, shmemx_team_t *team)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    if (ctx == SHMEMX_CTX_INVALID) {
        *team = SHMEMX_TEAM_INVALID;
        return -1;
    }

    shmem_transport_ctx_t *ctxp = (shmem_transport_ctx_t *)ctx;
    *team = (shmemx_team_t) ctxp->team;
    return 0;
}
